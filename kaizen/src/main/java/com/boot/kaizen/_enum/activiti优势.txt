
1、真正的业务与流程分离
   之前我们操作都是写在一个业务表里面然后，采用一些标记(0:在运行，1:运行结束)
   现在是流程控制环节、每个环节关联业务
2、每个环节的业务独立
   以前是判断标记，类似用多个if,根据if判断要执行那个业务
   每个环节都会有自己的业务，都会存在一个业务url连接，我们只需要动态的获取url，直接跳转就可以
3、极大的简化业务流程操作
   之前的回退操作，都是回退后立马修改标记位，然后修改部分业务状态，为后面根据标记位做后续的操作，举例：如果目前存在一个很复杂的系统，存在很多个节点的并行、排斥等等操作，这个时候需求是后一个节点可以回退到前面指定的任何环节，有了工作流之后，我们只需要将流程图的节点修改指定的方向就可以，任务业务代码都不用做操作。当时如果采用标记控制流程或者自己写流程业务的话，那样每次改动流程图，代码都得做相应的调整。当流程业务复杂、节点很多的时候，根本实现不了。
  流程控制回退，只需要传递一个条件即可
4、修改简单
   流程控制带来的最大方便就是修改简单，之前遇到过权限跟业务节点同时存在的流程，当存在很多个业务阶段的时候，回退操作很难进行，而且后期会发现业务表的字段会几十个之多。
5、业务顺序简单易懂
   流程采用图的形式直观易懂，只看图就可以知道当前任务执行到哪一步了。如果不采用流程  那么隐藏性很高，根本不会确定。
6、控制权限
     流程经常与权限关联在一起，有时候我们希望某个流程节点需要特定角色的用户来执行，这个时候很简单，只需要在流程图上加上角色标记即可，而且后期我们需要看这个节点的角色的时候  也很简单，打开流程图看一下就可以，如果需要修改该节点对应的角色，也是很简单的，直接修改。重新部署一下就可以，但是之前角色是透明的，而且修改的时候 还需要去改代码，不易于维护，而且不直观。
7、监控全面、帮助分析业务信息、方便排查问题，其实工作流本身就是一个框架，他有自己的一套完整的业务表，会记录各个节点的执行情况，我们可以个根据这些节点执行的情况，来推断我们业务的执行状况，例如：我们需要知道每个业务的执行时间，执行次数，哪一个人处理了那些业务，等等一系列的操作，工作流都会有记录，如果这些信息人为采用业务表去记录操作的话，那样子将会很麻烦。
8、并行、排斥、发邮件、等待、发信号、定时等这些很常见的业务操作，工作流都有一定的逻辑处理，大大简化了研发的工作量
9、提高效率、规范行为、快速响应、方便维护
   流程的业务模块，在真实的业务需求中，是很常见的，如果没有工作流，那么每个人开发流程的流程思路、编写代码的方式都会不一样，后期就会出现谁开发的流程，谁来维护的尴尬局面。使用activiti之后，就提供了一个代码规范，一个开发的规范，每个人都在这个规范下开发，这种模式对团队的开发很有利。

综上：工作流存在的意义就在于更好的帮助我们解决复杂的业务，业务越是复杂越容易体现出工作流的优势。在好多情况下，业务流程发生改变的时候，只需要调整一下流程图就可以，甚至可以做到


